{
  "version": 4,
  "terraform_version": "0.12.6",
  "serial": 51,
  "lineage": "a78c9c2b-0075-4d72-8d3a-61b07379dec6",
  "outputs": {
    "base_url": {
      "value": "https://p6eq7oeqxl.execute-api.us-west-2.amazonaws.com/test",
      "type": "string"
    }
  },
  "resources": [
    {
      "mode": "data",
      "type": "archive_file",
      "name": "lambda_zip",
      "provider": "provider.archive",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "excludes": null,
            "id": "a6de3edd9d3b875c029358b3aaa7be25dbe32f9b",
            "output_base64sha256": "/mtqbEZSt3Hsd3icgoB/Y92BhlQ7iIkfkPPsewPF2wI=",
            "output_md5": "c950b3e6c65a2d9ae806f1f55cd65ef6",
            "output_path": "lambda_function.zip",
            "output_sha": "a6de3edd9d3b875c029358b3aaa7be25dbe32f9b",
            "output_size": 1542,
            "source": [
              {
                "content": "[\n  { \"id\": \"FUND1\", \"name\": \"First Fund\", \"price\": 100, \"brokerageAmount\": 25 },\n  { \"id\": \"FUND2\", \"name\": \"Second Fund\", \"price\": 100, \"brokerageRate\": 0.01 }\n]",
                "filename": "instruments.json"
              },
              {
                "content": "const instruments = require('./instruments.json')\n\nfunction additional({fundId, units}) {\n  const fund = instruments.find(x =\u003e x.id === fundId)\n  const basePrice = units * fund.price\n  const brokerage = fund.brokerageAmount !== undefined ? fund.brokerageAmount * 1 : fund.brokerageRate * basePrice\n\n  return {\n    fundId,\n    units = units * 1,\n    basePrice,\n    brokerage,\n    totalPrice: basePrice + brokerage\n  }\n}  \n\nfunction inclusive({fundId, amount}) {\n  const fund = instruments.find(x =\u003e x.id === fundId)\n\n  const estimatedBrokerage = fund.brokerageAmount !== undefined ? fund.brokerageAmount * 1  : fund.brokerageRate * amount\n\n  const units = Math.floor((amount - estimatedBrokerage) / fund.price)\n\n  const basePrice = units * fund.price \n\n  const actualBrokerage = fund.brokerageAmount !== undefined ? fund.brokerageAmount * 1 : fund.brokerageRate * basePrice\n\n  return {\n    fundId,\n    units,\n    basePrice,\n    brokerage: actualBrokerage,\n    totalPrice: basePrice + actualBrokerage\n  }\n}  \n\n\nmodule.exports = {\n  additional,\n  inclusive\n}\n",
                "filename": "brokerage.js"
              },
              {
                "content": "const instruments = require('./instruments.json')\n\nfunction listInstruments({q}) {\n  return instruments.filter(x =\u003e !q || x.id.includes(q.toUpperCase()) || x.name.toUpperCase().includes(q.toUpperCase()))\n  .map(x =\u003e ({\n    id: x.id,\n    name: x.name,\n    price: x.price\n  }))\n}\n\nmodule.exports = listInstruments",
                "filename": "list.js"
              },
              {
                "content": "const listInstruments = require('./list')\nconst brokerage = require('./brokerage')\n\nexports.handler = (event, context, callback) =\u003e {\n\n  const fns = {\n    \"/instruments\": listInstruments,\n    \"/brokerage\": brokerage.additional,\n    \"/brokerage/inclusive\": brokerage.inclusive\n  }\n\n  if (event.httpMethod == \"GET\" \u0026\u0026 fns[event.path]) {\n    const result = fns[event.path](event.queryStringParameters || {})\n    const response = {\n      statusCode: 200,\n      headers: {\n        'Content-Type': 'application/json', \n        \"Access-Control-Allow-Origin\": \"*\",\n        \"Access-Control-Allow-Headers\": \"Content-Type\",\n        \"Access-Control-Allow-Methods\": \"OPTIONS, GET\",\n      },\n      body: JSON.stringify(result),\n    };\n    callback(null, response);\n  }\n  else if (event.httpMethod == \"OPTIONS\") {\n    const response = {\n      statusCode: 204,\n      headers: {\n        \"Access-Control-Allow-Origin\": \"*\",\n        \"Access-Control-Allow-Headers\": \"Content-Type\",\n        \"Access-Control-Allow-Methods\": \"OPTIONS, GET\",\n      },\n      body: \"\"\n    };\n    callback(null, response);\n\n  }\n  else {\n    const response = {\n      statusCode: 400,\n      body: JSON.stringify({message: \"Not implemented\"}),\n    };\n    callback(null, response);\n  }\n\n\n\n\n};",
                "filename": "index.js"
              }
            ],
            "source_content": null,
            "source_content_filename": null,
            "source_dir": null,
            "source_file": null,
            "type": "zip"
          },
          "depends_on": [
            "data.template_file.brokerage_js",
            "data.template_file.index_js",
            "data.template_file.instruments_json",
            "data.template_file.list_js"
          ]
        }
      ]
    },
    {
      "mode": "data",
      "type": "template_file",
      "name": "brokerage_js",
      "provider": "provider.template",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "filename": null,
            "id": "8b49d5aa3180bbeb73ae892764727b4bf54df39bf71491bb09a4a938c8793001",
            "rendered": "const instruments = require('./instruments.json')\n\nfunction additional({fundId, units}) {\n  const fund = instruments.find(x =\u003e x.id === fundId)\n  const basePrice = units * fund.price\n  const brokerage = fund.brokerageAmount !== undefined ? fund.brokerageAmount * 1 : fund.brokerageRate * basePrice\n\n  return {\n    fundId,\n    units = units * 1,\n    basePrice,\n    brokerage,\n    totalPrice: basePrice + brokerage\n  }\n}  \n\nfunction inclusive({fundId, amount}) {\n  const fund = instruments.find(x =\u003e x.id === fundId)\n\n  const estimatedBrokerage = fund.brokerageAmount !== undefined ? fund.brokerageAmount * 1  : fund.brokerageRate * amount\n\n  const units = Math.floor((amount - estimatedBrokerage) / fund.price)\n\n  const basePrice = units * fund.price \n\n  const actualBrokerage = fund.brokerageAmount !== undefined ? fund.brokerageAmount * 1 : fund.brokerageRate * basePrice\n\n  return {\n    fundId,\n    units,\n    basePrice,\n    brokerage: actualBrokerage,\n    totalPrice: basePrice + actualBrokerage\n  }\n}  \n\n\nmodule.exports = {\n  additional,\n  inclusive\n}\n",
            "template": "const instruments = require('./instruments.json')\n\nfunction additional({fundId, units}) {\n  const fund = instruments.find(x =\u003e x.id === fundId)\n  const basePrice = units * fund.price\n  const brokerage = fund.brokerageAmount !== undefined ? fund.brokerageAmount * 1 : fund.brokerageRate * basePrice\n\n  return {\n    fundId,\n    units = units * 1,\n    basePrice,\n    brokerage,\n    totalPrice: basePrice + brokerage\n  }\n}  \n\nfunction inclusive({fundId, amount}) {\n  const fund = instruments.find(x =\u003e x.id === fundId)\n\n  const estimatedBrokerage = fund.brokerageAmount !== undefined ? fund.brokerageAmount * 1  : fund.brokerageRate * amount\n\n  const units = Math.floor((amount - estimatedBrokerage) / fund.price)\n\n  const basePrice = units * fund.price \n\n  const actualBrokerage = fund.brokerageAmount !== undefined ? fund.brokerageAmount * 1 : fund.brokerageRate * basePrice\n\n  return {\n    fundId,\n    units,\n    basePrice,\n    brokerage: actualBrokerage,\n    totalPrice: basePrice + actualBrokerage\n  }\n}  \n\n\nmodule.exports = {\n  additional,\n  inclusive\n}\n",
            "vars": null
          }
        }
      ]
    },
    {
      "mode": "data",
      "type": "template_file",
      "name": "index_js",
      "provider": "provider.template",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "filename": null,
            "id": "c099a825ac49cc89557e0e55228a3be7716b7713d85886d87ac930be89516c04",
            "rendered": "const listInstruments = require('./list')\nconst brokerage = require('./brokerage')\n\nexports.handler = (event, context, callback) =\u003e {\n\n  const fns = {\n    \"/instruments\": listInstruments,\n    \"/brokerage\": brokerage.additional,\n    \"/brokerage/inclusive\": brokerage.inclusive\n  }\n\n  if (event.httpMethod == \"GET\" \u0026\u0026 fns[event.path]) {\n    const result = fns[event.path](event.queryStringParameters || {})\n    const response = {\n      statusCode: 200,\n      headers: {\n        'Content-Type': 'application/json', \n        \"Access-Control-Allow-Origin\": \"*\",\n        \"Access-Control-Allow-Headers\": \"Content-Type\",\n        \"Access-Control-Allow-Methods\": \"OPTIONS, GET\",\n      },\n      body: JSON.stringify(result),\n    };\n    callback(null, response);\n  }\n  else if (event.httpMethod == \"OPTIONS\") {\n    const response = {\n      statusCode: 204,\n      headers: {\n        \"Access-Control-Allow-Origin\": \"*\",\n        \"Access-Control-Allow-Headers\": \"Content-Type\",\n        \"Access-Control-Allow-Methods\": \"OPTIONS, GET\",\n      },\n      body: \"\"\n    };\n    callback(null, response);\n\n  }\n  else {\n    const response = {\n      statusCode: 400,\n      body: JSON.stringify({message: \"Not implemented\"}),\n    };\n    callback(null, response);\n  }\n\n\n\n\n};",
            "template": "const listInstruments = require('./list')\nconst brokerage = require('./brokerage')\n\nexports.handler = (event, context, callback) =\u003e {\n\n  const fns = {\n    \"/instruments\": listInstruments,\n    \"/brokerage\": brokerage.additional,\n    \"/brokerage/inclusive\": brokerage.inclusive\n  }\n\n  if (event.httpMethod == \"GET\" \u0026\u0026 fns[event.path]) {\n    const result = fns[event.path](event.queryStringParameters || {})\n    const response = {\n      statusCode: 200,\n      headers: {\n        'Content-Type': 'application/json', \n        \"Access-Control-Allow-Origin\": \"*\",\n        \"Access-Control-Allow-Headers\": \"Content-Type\",\n        \"Access-Control-Allow-Methods\": \"OPTIONS, GET\",\n      },\n      body: JSON.stringify(result),\n    };\n    callback(null, response);\n  }\n  else if (event.httpMethod == \"OPTIONS\") {\n    const response = {\n      statusCode: 204,\n      headers: {\n        \"Access-Control-Allow-Origin\": \"*\",\n        \"Access-Control-Allow-Headers\": \"Content-Type\",\n        \"Access-Control-Allow-Methods\": \"OPTIONS, GET\",\n      },\n      body: \"\"\n    };\n    callback(null, response);\n\n  }\n  else {\n    const response = {\n      statusCode: 400,\n      body: JSON.stringify({message: \"Not implemented\"}),\n    };\n    callback(null, response);\n  }\n\n\n\n\n};",
            "vars": null
          }
        }
      ]
    },
    {
      "mode": "data",
      "type": "template_file",
      "name": "instruments_json",
      "provider": "provider.template",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "filename": null,
            "id": "6160365b6d903852abfff44244dab17db1f48d5de577b9bbb9658d351dcf5e8a",
            "rendered": "[\n  { \"id\": \"FUND1\", \"name\": \"First Fund\", \"price\": 100, \"brokerageAmount\": 25 },\n  { \"id\": \"FUND2\", \"name\": \"Second Fund\", \"price\": 100, \"brokerageRate\": 0.01 }\n]",
            "template": "[\n  { \"id\": \"FUND1\", \"name\": \"First Fund\", \"price\": 100, \"brokerageAmount\": 25 },\n  { \"id\": \"FUND2\", \"name\": \"Second Fund\", \"price\": 100, \"brokerageRate\": 0.01 }\n]",
            "vars": null
          }
        }
      ]
    },
    {
      "mode": "data",
      "type": "template_file",
      "name": "list_js",
      "provider": "provider.template",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "filename": null,
            "id": "f0e706f5ea5f0bd246833cd9d905ed71455300855126dd804ab18aa5842f4656",
            "rendered": "const instruments = require('./instruments.json')\n\nfunction listInstruments({q}) {\n  return instruments.filter(x =\u003e !q || x.id.includes(q.toUpperCase()) || x.name.toUpperCase().includes(q.toUpperCase()))\n  .map(x =\u003e ({\n    id: x.id,\n    name: x.name,\n    price: x.price\n  }))\n}\n\nmodule.exports = listInstruments",
            "template": "const instruments = require('./instruments.json')\n\nfunction listInstruments({q}) {\n  return instruments.filter(x =\u003e !q || x.id.includes(q.toUpperCase()) || x.name.toUpperCase().includes(q.toUpperCase()))\n  .map(x =\u003e ({\n    id: x.id,\n    name: x.name,\n    price: x.price\n  }))\n}\n\nmodule.exports = listInstruments",
            "vars": null
          }
        }
      ]
    },
    {
      "mode": "managed",
      "type": "aws_api_gateway_deployment",
      "name": "spitfire_recruitment",
      "provider": "provider.aws",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "created_date": "2019-08-27T00:48:48Z",
            "description": "",
            "execution_arn": "arn:aws:execute-api:us-west-2:772458536205:p6eq7oeqxl/test",
            "id": "qp0rba",
            "invoke_url": "https://p6eq7oeqxl.execute-api.us-west-2.amazonaws.com/test",
            "rest_api_id": "p6eq7oeqxl",
            "stage_description": null,
            "stage_name": "test",
            "variables": null
          },
          "private": "bnVsbA==",
          "depends_on": [
            "aws_api_gateway_integration.lambda",
            "aws_api_gateway_rest_api.spitfire_recruitment"
          ]
        }
      ]
    },
    {
      "mode": "managed",
      "type": "aws_api_gateway_integration",
      "name": "lambda",
      "provider": "provider.aws",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "cache_key_parameters": [],
            "cache_namespace": "um83la",
            "connection_id": "",
            "connection_type": "INTERNET",
            "content_handling": "",
            "credentials": "",
            "http_method": "ANY",
            "id": "agi-p6eq7oeqxl-um83la-ANY",
            "integration_http_method": "POST",
            "passthrough_behavior": "WHEN_NO_MATCH",
            "request_parameters": {},
            "request_parameters_in_json": null,
            "request_templates": {},
            "resource_id": "um83la",
            "rest_api_id": "p6eq7oeqxl",
            "timeout_milliseconds": 29000,
            "type": "AWS_PROXY",
            "uri": "arn:aws:apigateway:us-west-2:lambda:path/2015-03-31/functions/arn:aws:lambda:us-west-2:772458536205:function:test_lambda/invocations"
          },
          "private": "bnVsbA==",
          "depends_on": [
            "aws_api_gateway_method.proxy",
            "aws_api_gateway_rest_api.spitfire_recruitment",
            "aws_lambda_function.test_lambda"
          ]
        }
      ]
    },
    {
      "mode": "managed",
      "type": "aws_api_gateway_method",
      "name": "proxy",
      "provider": "provider.aws",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "api_key_required": false,
            "authorization": "NONE",
            "authorization_scopes": [],
            "authorizer_id": "",
            "http_method": "ANY",
            "id": "agm-p6eq7oeqxl-um83la-ANY",
            "request_models": {},
            "request_parameters": {},
            "request_parameters_in_json": null,
            "request_validator_id": "",
            "resource_id": "um83la",
            "rest_api_id": "p6eq7oeqxl"
          },
          "private": "bnVsbA==",
          "depends_on": [
            "aws_api_gateway_resource.proxy",
            "aws_api_gateway_rest_api.spitfire_recruitment"
          ]
        }
      ]
    },
    {
      "mode": "managed",
      "type": "aws_api_gateway_resource",
      "name": "proxy",
      "provider": "provider.aws",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "id": "um83la",
            "parent_id": "visu76xxjb",
            "path": "/{proxy+}",
            "path_part": "{proxy+}",
            "rest_api_id": "p6eq7oeqxl"
          },
          "private": "bnVsbA==",
          "depends_on": [
            "aws_api_gateway_rest_api.spitfire_recruitment"
          ]
        }
      ]
    },
    {
      "mode": "managed",
      "type": "aws_api_gateway_rest_api",
      "name": "spitfire_recruitment",
      "provider": "provider.aws",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "api_key_source": "HEADER",
            "binary_media_types": [],
            "body": null,
            "created_date": "2019-08-27T00:48:31Z",
            "description": "API for the coding test",
            "endpoint_configuration": [
              {
                "types": [
                  "EDGE"
                ]
              }
            ],
            "execution_arn": "arn:aws:execute-api:us-west-2:772458536205:p6eq7oeqxl",
            "id": "p6eq7oeqxl",
            "minimum_compression_size": -1,
            "name": "SpitfireRecruitment",
            "policy": "",
            "root_resource_id": "visu76xxjb"
          },
          "private": "bnVsbA=="
        }
      ]
    },
    {
      "mode": "managed",
      "type": "aws_iam_policy",
      "name": "policy",
      "provider": "provider.aws",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "arn": "arn:aws:iam::772458536205:policy/test-policy",
            "description": "A test policy",
            "id": "arn:aws:iam::772458536205:policy/test-policy",
            "name": "test-policy",
            "name_prefix": null,
            "path": "/",
            "policy": "{\n  \"Version\": \"2012-10-17\",\n  \"Statement\": [\n    {\n        \"Action\": [\n            \"logs:CreateLogGroup\",\n             \"logs:CreateLogStream\",\n             \"logs:PutLogEvents\"\n        ],\n        \"Effect\": \"Allow\",\n        \"Resource\": \"arn:aws:logs:*:*:*\"\n    }\n  ]\n}\n"
          },
          "private": "bnVsbA=="
        }
      ]
    },
    {
      "mode": "managed",
      "type": "aws_iam_role",
      "name": "iam_for_lambda_tf",
      "provider": "provider.aws",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "arn": "arn:aws:iam::772458536205:role/iam_for_lambda_tf",
            "assume_role_policy": "{\"Version\":\"2012-10-17\",\"Statement\":[{\"Sid\":\"\",\"Effect\":\"Allow\",\"Principal\":{\"Service\":\"lambda.amazonaws.com\"},\"Action\":\"sts:AssumeRole\"}]}",
            "create_date": "2019-08-27T00:48:31Z",
            "description": "",
            "force_detach_policies": false,
            "id": "iam_for_lambda_tf",
            "max_session_duration": 3600,
            "name": "iam_for_lambda_tf",
            "name_prefix": null,
            "path": "/",
            "permissions_boundary": null,
            "tags": {},
            "unique_id": "AROA3HWQ53UGQG5L6EU3H"
          },
          "private": "bnVsbA=="
        }
      ]
    },
    {
      "mode": "managed",
      "type": "aws_iam_role_policy_attachment",
      "name": "test-attach",
      "provider": "provider.aws",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "id": "iam_for_lambda_tf-20190827052322114200000001",
            "policy_arn": "arn:aws:iam::772458536205:policy/test-policy",
            "role": "iam_for_lambda_tf"
          },
          "private": "bnVsbA==",
          "depends_on": [
            "aws_iam_policy.policy",
            "aws_iam_role.iam_for_lambda_tf"
          ]
        }
      ]
    },
    {
      "mode": "managed",
      "type": "aws_lambda_function",
      "name": "test_lambda",
      "provider": "provider.aws",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "arn": "arn:aws:lambda:us-west-2:772458536205:function:test_lambda",
            "dead_letter_config": [],
            "description": "",
            "environment": [],
            "filename": "lambda_function.zip",
            "function_name": "test_lambda",
            "handler": "index.handler",
            "id": "test_lambda",
            "invoke_arn": "arn:aws:apigateway:us-west-2:lambda:path/2015-03-31/functions/arn:aws:lambda:us-west-2:772458536205:function:test_lambda/invocations",
            "kms_key_arn": "",
            "last_modified": "2019-08-27T05:45:12.727+0000",
            "layers": [],
            "memory_size": 128,
            "publish": false,
            "qualified_arn": "arn:aws:lambda:us-west-2:772458536205:function:test_lambda:$LATEST",
            "reserved_concurrent_executions": -1,
            "role": "arn:aws:iam::772458536205:role/iam_for_lambda_tf",
            "runtime": "nodejs10.x",
            "s3_bucket": null,
            "s3_key": null,
            "s3_object_version": null,
            "source_code_hash": "/mtqbEZSt3Hsd3icgoB/Y92BhlQ7iIkfkPPsewPF2wI=",
            "source_code_size": 1542,
            "tags": {},
            "timeout": 3,
            "timeouts": null,
            "tracing_config": [
              {
                "mode": "PassThrough"
              }
            ],
            "version": "$LATEST",
            "vpc_config": []
          },
          "private": "eyJlMmJmYjczMC1lY2FhLTExZTYtOGY4OC0zNDM2M2JjN2M0YzAiOnsiY3JlYXRlIjo2MDAwMDAwMDAwMDB9fQ==",
          "depends_on": [
            "aws_iam_role.iam_for_lambda_tf",
            "data.archive_file.lambda_zip"
          ]
        }
      ]
    },
    {
      "mode": "managed",
      "type": "aws_lambda_permission",
      "name": "apigw",
      "provider": "provider.aws",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "action": "lambda:InvokeFunction",
            "event_source_token": null,
            "function_name": "arn:aws:lambda:us-west-2:772458536205:function:test_lambda",
            "id": "AllowAPIGatewayInvoke",
            "principal": "apigateway.amazonaws.com",
            "qualifier": "",
            "source_account": null,
            "source_arn": "arn:aws:execute-api:us-west-2:772458536205:p6eq7oeqxl/test/*/*",
            "statement_id": "AllowAPIGatewayInvoke",
            "statement_id_prefix": null
          },
          "private": "bnVsbA==",
          "depends_on": [
            "aws_api_gateway_deployment.spitfire_recruitment",
            "aws_lambda_function.test_lambda"
          ]
        }
      ]
    }
  ]
}
